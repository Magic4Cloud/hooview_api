<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hooview.api.dao.OrderDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.hooview.api.entity.OrderEntity" id="orderMap">
        <result property="orderId" column="order_id"/>
        <result property="orderNo" column="order_no"/>
        <result property="liveId" column="live_id"/>
        <result property="orderPrice" column="order_price"/>
        <result property="userId" column="user_id"/>
        <result property="createTime" column="create_time"/>
        <result property="status" column="status"/>
        <result property="payTypeId" column="pay_type_id"/>
        <result property="payTime" column="pay_time"/>
    </resultMap>

	<select id="queryObject" resultType="com.hooview.api.entity.OrderEntity">
		select * from tb_order where order_id = #{value}
	</select>

	<select id="queryOrderObject" resultType="com.hooview.api.dto.orderDTO">
		SELECT
	tbl.live_id,
	tbl.live_title,
	tbl.vid,
	(
		SELECT
			type_name
		FROM
			tb_live_type
		WHERE
			live_type_id = tbl.live_type_id
	) liveTypeName,
	tbl.logourl,
	(
		SELECT
			nickname
		FROM
			sys_user
		WHERE
			user_id = tbl.user_id
	) nickName,
	tbl.live_status,
	tbo.order_id,
	tbo.order_price,
	tbo.pay_time,
	tbo.order_no,
	(
		SELECT
			pay_type_name
		FROM
			tb_pay_type
		WHERE
			pay_type_id = tbo.pay_type_id
	) payTypeName
	  FROM tb_order tbo
		JOIN tb_live tbl ON tbo.live_id = tbl.live_id
		WHERE tbo.order_id = #{orderId}
	</select>

	<select id="queryList" resultType="com.hooview.api.entity.OrderEntity">
		select * from tb_order where user_id = #{userId}
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by order_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="queryOrderList" resultType="com.hooview.api.dto.orderDTO">
		SELECT
		tbl.live_id,
		tbl.live_title,
		tbl.vid,
		tbl.live_url,
		tbl.logourl,
		(
		SELECT
		type_name
		FROM
		tb_live_type
		WHERE
		live_type_id = tbl.live_type_id
		) liveTypeName,
		tbl.logourl,
		(
		SELECT
		nickname
		FROM
		sys_user
		WHERE
		user_id = tbl.user_id
		) nickName,
		tbl.live_status,
		tbo.order_id,
		tbo.order_price,
		tbo.pay_time,
		tbo.order_no,
		(
		SELECT
		pay_type_name
		FROM
		tb_pay_type
		WHERE
		pay_type_id = tbo.pay_type_id
		) payTypeName
		FROM
		tb_order tbo JOIN tb_live tbl ON tbo.live_id = tbl.live_id
		WHERE
		tbo.user_id = #{userId}
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				order by ${sidx} ${order}
			</when>
			<otherwise>
				order by order_id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		SELECT count(*) FROM tb_order tbo JOIN tb_live tbl ON tbo.live_id = tbl.live_id WHERE tbo.user_id = #{userId}
	</select>
	 
	<insert id="save" parameterType="com.hooview.api.entity.OrderEntity" useGeneratedKeys="true" keyProperty="orderId">
		insert into tb_order
		(
			`order_no`, 
			`live_id`, 
			`order_price`, 
			`user_id`, 
			`create_time`, 
			`status`, 
			`pay_type_id`, 
			`pay_time`
		)
		values
		(
			#{orderNo}, 
			#{liveId}, 
			#{orderPrice}, 
			#{userId}, 
			#{createTime}, 
			#{status}, 
			#{payTypeId}, 
			#{payTime}
		)
	</insert>
	 
	<update id="update" parameterType="com.hooview.api.entity.OrderEntity">
		update tb_order 
		<set>
			<if test="orderNo != null">`order_no` = #{orderNo}, </if>
			<if test="liveId != null">`live_id` = #{liveId}, </if>
			<if test="orderPrice != null">`order_price` = #{orderPrice}, </if>
			<if test="userId != null">`user_id` = #{userId}, </if>
			<if test="createTime != null">`create_time` = #{createTime}, </if>
			<if test="status != null">`status` = #{status}, </if>
			<if test="payTypeId != null">`pay_type_id` = #{payTypeId}, </if>
			<if test="payTime != null">`pay_time` = #{payTime}</if>
		</set>
		where order_id = #{orderId}
	</update>
	
	<delete id="delete">
		delete from tb_order where order_id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from tb_order where order_id in 
		<foreach item="orderId" collection="array" open="(" separator="," close=")">
			#{orderId}
		</foreach>
	</delete>

</mapper>