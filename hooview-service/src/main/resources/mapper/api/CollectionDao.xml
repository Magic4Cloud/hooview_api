<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hooview.api.dao.CollectionDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.hooview.api.entity.CollectionEntity" id="collectionMap">
        <result property="collectionId" column="collection_id"/>
        <result property="userId" column="user_id"/>
        <result property="sourceId" column="source_id"/>
        <result property="sourceType" column="source_type"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

	<select id="queryObject" resultType="com.hooview.api.entity.CollectionEntity">
		select * from tb_collection where collection_id = #{value}
	</select>

	<select id="queryList" resultType="com.hooview.api.entity.CollectionEntity">
		select * from tb_collection where user_id = #{userId}
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by collection_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="queryLiveList" resultType="com.hooview.api.dto.LiveCollectionDTO">
		SELECT
		tc.collection_id,
		tl.live_id,
		tl.live_title,
		tl.vid,
		tl.watching_count,
		tlt.type_name liveTypeName,
		tl.logourl,
		su.nickname,
		tl.live_status
		FROM
		tb_collection tc
		JOIN tb_live tl ON tc.source_id = tl.live_id
		JOIN tb_live_type tlt ON tlt.live_type_id = tl.live_type_id
		JOIN sys_user su ON su.user_id = tl.user_id
		WHERE
		tc.source_type = 0 AND tc.user_id=#{userId}
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				order by ${sidx} ${order}
			</when>
			<otherwise>
				order by tc.collection_id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="queryFinanceList" resultType="com.hooview.api.dto.FinanceCollectionDTO">
		SELECT collection.collection_id,finance.finance_info_id,finance.title,finance.cover_pic
		FROM tb_collection collection JOIN  tb_finance_info finance
		ON collection.source_id = finance.finance_info_id
		WHERE collection.source_type=1
		AND collection.user_id=#{userId}
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				order by ${sidx} ${order}
			</when>
			<otherwise>
				order by collection_id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="queryFinanceTotal" resultType="int">
		select count(*) FROM tb_collection collection JOIN  tb_finance_info finance
		ON collection.source_id = finance.finance_info_id
		WHERE collection.source_type=1
		AND collection.user_id=#{userId}
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*)
		FROM tb_collection tc
		JOIN tb_live tl ON tc.source_id = tl.live_id
		JOIN tb_live_type tlt ON tlt.live_type_id = tl.live_type_id
		JOIN sys_user su ON su.user_id = tl.user_id
		WHERE
		tc.source_type = 0 AND tc.user_id=#{userId}
	</select>

	<select id="queryUserFollow" resultType="long">
		SELECT collection_id FROM tb_collection
		WHERE user_id= #{userId} AND source_id=#{sourceId} and source_type=#{type}
		limit 1
	</select>
	 
	<insert id="save" parameterType="com.hooview.api.entity.CollectionEntity">
		insert into tb_collection
		(
			`collection_id`, 
			`user_id`, 
			`source_id`, 
			`source_type`, 
			`create_time`
		)
		values
		(
			#{collectionId}, 
			#{userId}, 
			#{sourceId}, 
			#{sourceType}, 
			#{createTime}
		)
	</insert>
	 
	<update id="update" parameterType="com.hooview.api.entity.CollectionEntity">
		update tb_collection 
		<set>
			<if test="userId != null">`user_id` = #{userId}, </if>
			<if test="sourceId != null">`source_id` = #{sourceId}, </if>
			<if test="sourceType != null">`source_type` = #{sourceType}, </if>
			<if test="createTime != null">`create_time` = #{createTime}</if>
		</set>
		where collection_id = #{collectionId}
	</update>
	
	<delete id="delete">
		delete from tb_collection where user_id = #{userId} and source_id=#{sourceId} and source_type=#{sourceType}
	</delete>
	
	<delete id="deleteBatch">
		delete from tb_collection where collection_id in 
		<foreach item="collectionId" collection="array" open="(" separator="," close=")">
			#{collectionId}
		</foreach>
	</delete>

	<delete id="deleteCollections">
		delete from tb_collection where user_id = #{userId} and collection_id in
		<foreach item="collectionId" collection="collectionIds" open="(" separator="," close=")">
			#{collectionId}
		</foreach>
	</delete>

	<delete id="deleteSource">
		delete from tb_collection where source_type=#{sourceType} AND source_id in
		<foreach item="sourceId" collection="sourceIds" open="(" separator="," close=")">
			#{sourceId}
		</foreach>
	</delete>

</mapper>